==================
type definition
==================

-- Documentation comment
Foo : type

------------------

(source_file
  statement: (type_definition_statement
    comment: (comment)
    name: (type_name)))

===================
generic type definition
===================

Foo : value => type

------------------

(source_file
  statement: (type_definition_statement
    name: (type_name)
    parameter: (parameter_type
      name: (type_parameter_name))))

===================
structure type definition
===================

Foo : type {
    a :: A
    b :: B
}

------------------

(source_file
  statement: (type_definition_statement
    name: (type_name)
    representation: (structure_type_representation
      field: (field_definition
        name: (variable_name)
        type: (named_type
          name: (type_name)))
      field: (field_definition
        name: (variable_name)
        type: (named_type
          name: (type_name))))))

==================
enumeration type definition
==================

Foo : type {
    Some Number
    None
}

------------------

(source_file
  statement: (type_definition_statement
    name: (type_name)
    representation: (enumeration_type_representation
      variant: (variant_definition
        name: (variant_name)
        element: (named_type
          name: (type_name)))
      variant: (variant_definition
        name: (variant_name)))))

==================
marker trait definition
==================

Foo : trait

------------------

(source_file
  statement: (trait_definition_statement
    name: (type_name)))

==================
generic marker trait definition
==================

Foo : value => trait

------------------

(source_file
  statement: (trait_definition_statement
    name: (type_name)
    parameter: (parameter_type
      name: (type_parameter_name))))

==================
valued trait definition
==================

Foo : trait Number

------------------

(source_file
  statement: (trait_definition_statement
    name: (type_name)
    type: (named_type
      name: (type_name))))

==================
generic valued trait definition
==================

Foo : value => trait (value -> Number)

------------------

(source_file
  statement: (trait_definition_statement
    name: (type_name)
    parameter: (parameter_type
      name: (type_parameter_name))
    type: (function_type
      input: (parameter_type
        name: (type_parameter_name))
      output: (named_type
        name: (type_name)))))

==================
constant definition
==================

show :: value -> Unit where (Show value)

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (function_type
      input: (parameter_type
        name: (type_parameter_name))
      output: (named_type
        name: (type_name)))
    constraint: (bound_constraint
      trait: (type_name)
      parameter: (parameter_type
        name: (type_parameter_name)))))

==================
simple marker instance definition
==================

instance (Foo Number)

------------------

(source_file
  statement: (instance_definition_statement
    trait: (type_name)
    parameter: (named_type
      name: (type_name))))

==================
simple valued instance definition
==================

instance (Foo Number) : 3.14

------------------

(source_file
  statement: (instance_definition_statement
    trait: (type_name)
    parameter: (named_type
      name: (type_name))
    value: (number_expression
      value: (number))))

==================
complex marker instance definition
==================

instance (Foo (Maybe value)) where (Foo value)

------------------

(source_file
  statement: (instance_definition_statement
    trait: (type_name)
    parameter: (named_type
      name: (type_name)
      parameter: (parameter_type
        name: (type_parameter_name)))
    constraint: (bound_constraint
      trait: (type_name)
      parameter: (parameter_type
        name: (type_parameter_name)))))

==================
complex valued instance definition
==================

instance (Foo (Maybe value)) where (Foo value) : 3.14

------------------

(source_file
  statement: (instance_definition_statement
    trait: (type_name)
    parameter: (named_type
      name: (type_name)
      parameter: (parameter_type
        name: (type_parameter_name)))
    constraint: (bound_constraint
      trait: (type_name)
      parameter: (parameter_type
        name: (type_parameter_name)))
    value: (number_expression
      value: (number))))

==================
variable expression
==================

foo

------------------

(source_file
  statement: (expression_statement
    expression: (name_expression
      variable: (variable_name))))

==================
number expression
==================

3.14

------------------

(source_file
  statement: (expression_statement
    expression: (number_expression
      value: (number))))

==================
text expression
==================

"abc"

------------------

(source_file
  statement: (expression_statement
    expression: (text_expression
      value: (text))))

==================
formatted text expression
==================

"Hello, _!" name

------------------

(source_file
  statement: (expression_statement
    expression: (formatted_text_expression
      text: (text)
      input: (name_expression
        variable: (variable_name)))))

==================
structure expression
==================

{
  a : b
  c : d
}

------------------

(source_file
  statement: (expression_statement
    expression: (structure_expression
      field: (structure_expression_field
        name: (variable_name)
        value: (name_expression
          variable: (variable_name)))
      field: (structure_expression_field
        name: (variable_name)
        value: (name_expression
          variable: (variable_name))))))

==================
block expression
==================

{foo}

------------------

(source_file
  statement: (expression_statement
    expression: (block_expression
      statement: (expression_statement
        expression: (name_expression
          variable: (variable_name))))))

==================
do expression
==================

do foo

------------------

(source_file
  statement: (expression_statement
    expression: (do_expression
      input: (name_expression
        variable: (variable_name)))))

==================
simple intrinsic expression
==================

intrinsic "message"

------------------

(source_file
  statement: (expression_statement
    expression: (intrinsic_expression
      name: (text))))

==================
complex intrinsic expression
==================

intrinsic "message" x y

------------------

(source_file
  statement: (expression_statement
    expression: (intrinsic_expression
      name: (text)
      input: (name_expression
        variable: (variable_name))
      input: (name_expression
        variable: (variable_name)))))

==================
when expression
==================

when x {
  a -> b
  c -> d
}

------------------

(source_file
  statement: (expression_statement
    expression: (when_expression
      input: (name_expression
        variable: (variable_name))
      arm: (arm
        pattern: (variable_pattern
          variable: (variable_name))
        value: (name_expression
          variable: (variable_name)))
      arm: (arm
        pattern: (variable_pattern
          variable: (variable_name))
        value: (name_expression
          variable: (variable_name))))))

==================
call expression
==================

f x y

------------------

(source_file
  statement: (expression_statement
    expression: (call_expression
      function: (name_expression
        variable: (variable_name))
      input: (name_expression
        variable: (variable_name))
      input: (name_expression
        variable: (variable_name)))))

==================
annotate expression
==================

(3.14 :: Number)

------------------

(source_file
  statement: (expression_statement
    expression: (annotate_expression
      left: (number_expression
        value: (number))
      right: (named_type
        name: (type_name)))))

==================
simple apply expression
==================

x . f

------------------

(source_file
  statement: (expression_statement
    expression: (apply_expression
      left: (name_expression
        variable: (variable_name))
      right: (name_expression
        variable: (variable_name)))))

==================
complex apply expression
==================

a b . c d

------------------

(source_file
  statement: (expression_statement
    expression: (apply_expression
      left: (call_expression
        function: (name_expression
          variable: (variable_name))
        input: (name_expression
          variable: (variable_name)))
      right: (call_expression
        function: (name_expression
          variable: (variable_name))
        input: (name_expression
          variable: (variable_name))))))

==================
as expression
==================

x as T

------------------

(source_file
  statement: (expression_statement
    expression: (as_expression
      left: (name_expression
        variable: (variable_name))
      right: (named_type
        name: (type_name)))))

==================
add expression
==================

a + b

------------------

(source_file
  statement: (expression_statement
    expression: (add_expression
      left: (name_expression
        variable: (variable_name))
      right: (name_expression
        variable: (variable_name)))))

==================
empty collection expression
==================

(,)

------------------

(source_file
  statement: (expression_statement
    expression: (collection_expression)))

==================
single-line collection expression
==================

a , b , c

------------------

(source_file
  statement: (expression_statement
    expression: (collection_expression
      element: (name_expression
        variable: (variable_name))
      element: (name_expression
        variable: (variable_name))
      element: (name_expression
        variable: (variable_name)))))

==================
multiline collection expression
==================

(
  a ,
  b ,
  c ,
)

------------------

(source_file
  statement: (expression_statement
    expression: (collection_expression
      element: (name_expression
        variable: (variable_name))
      element: (name_expression
        variable: (variable_name))
      element: (name_expression
        variable: (variable_name)))))

==================
single-input function expression
==================

x -> y

------------------

(source_file
  statement: (expression_statement
    expression: (function_expression
      input: (variable_pattern
        variable: (variable_name))
      output: (name_expression
        variable: (variable_name)))))

==================
multi-input function expression
==================

x y -> z

------------------

(source_file
  statement: (expression_statement
    expression: (function_expression
      input: (variable_pattern
        variable: (variable_name))
      input: (variable_pattern
        variable: (variable_name))
      output: (name_expression
        variable: (variable_name)))))

==================
complex-input function expression
==================

(X y) -> z

------------------

(source_file
  statement: (expression_statement
    expression: (function_expression
      input: (variant_pattern
        variant: (variant_name)
        element: (variable_pattern
          variable: (variable_name)))
      output: (name_expression
        variable: (variable_name)))))

==================
simple is expression
==================

x is None

------------------

(source_file
  statement: (expression_statement
    expression: (is_expression
      left: (name_expression
        variable: (variable_name))
      right: (variant_pattern
        variant: (variant_name)))))

==================
complex is expression
==================

x is Some 3.14

------------------

(source_file
  statement: (expression_statement
    expression: (is_expression
      left: (name_expression
        variable: (variable_name))
      right: (variant_pattern
        variant: (variant_name)
        element: (number_pattern
          value: (number))))))

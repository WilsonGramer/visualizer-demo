==================
placeholder type
==================

x :: _

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (placeholder_type)))

==================
unit type
==================

x :: ()

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (unit_type)))

==================
simple named type
==================

x :: Number

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (named_type
      name: (type_name))))

==================
complex named type
==================

x :: Maybe Number

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (named_type
      name: (type_name)
      parameter: (named_type
        name: (type_name)))))

==================
block type
==================

x :: {Number}

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (block_type
      output: (named_type
        name: (type_name)))))

==================
single-input function type
==================

x :: Number -> ()

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (function_type
      input: (named_type
        name: (type_name))
      output: (unit_type))))

==================
multi-input function type
==================

x :: Number Number -> ()

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (function_type
      input: (named_type
        name: (type_name))
      input: (named_type
        name: (type_name))
      output: (unit_type))))

==================
complex-input function type
==================

x :: (Maybe Number) Number -> ()

------------------

(source_file
  statement: (constant_definition_statement
    name: (variable_name)
    type: (function_type
      input: (named_type
        name: (type_name)
        parameter: (named_type
          name: (type_name)))
      input: (named_type
        name: (type_name))
      output: (unit_type))))

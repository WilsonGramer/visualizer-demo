// Statements

source_file = { SOI ~ statements? ~ EOI }

statements = ${ statement ~ ((!NEWLINE ~ WHITESPACE)* ~ NEWLINE ~ WHITESPACE* ~ statement)* }

statement = _{
    type_definition_statement
  | trait_definition_statement
  | constant_definition_statement
  | instance_definition_statement
  | assignment_statement
  | expression_statement
}

type_definition_statement = !{ comment* ~ attribute* ~ type_name ~ ":" ~ type_parameters? ~ type_representation }

type_representation = _{
    structure_type_representation
  | enumeration_type_representation
  | marker_type_representation
}

structure_type_representation = ${ "type" ~ (!NEWLINE ~ WHITESPACE)* ~ "{" ~ WHITESPACE* ~ field_definition ~ ((!NEWLINE ~ WHITESPACE)* ~ NEWLINE ~ WHITESPACE* ~ field_definition)* ~ WHITESPACE* ~ "}" }
field_definition              = !{ variable_name ~ "::" ~ type }

enumeration_type_representation = ${ "type" ~ (!NEWLINE ~ WHITESPACE)* ~ "{" ~ WHITESPACE* ~ variant_definition ~ ((!NEWLINE ~ WHITESPACE)* ~ NEWLINE ~ WHITESPACE* ~ variant_definition)* ~ WHITESPACE* ~ "}" }
variant_definition              = ${ variant_name ~ ((!NEWLINE ~ WHITESPACE)* ~ variant_definition_element)* }
variant_definition_element      = !{ subtype }

marker_type_representation = { "type" }

trait_definition_statement = !{ comment* ~ attribute* ~ type_name ~ ":" ~ type_parameters? ~ trait_constraints }
trait_constraints          = ${ "trait" ~ (!NEWLINE ~ WHITESPACE)* ~ subtype ~ (!NEWLINE ~ WHITESPACE)* ~ constraints? }

constant_definition_statement = !{ comment* ~ attribute* ~ variable_name ~ constant_constraints }
constant_constraints          = ${ "::" ~ (!NEWLINE ~ WHITESPACE)* ~ type ~ (!NEWLINE ~ WHITESPACE)* ~ constraints? }

instance_definition_statement = !{ comment* ~ attribute* ~ instance_constraints ~ ":" ~ expression }
instance_constraints          = ${ "instance" ~ (!NEWLINE ~ WHITESPACE)* ~ bound_constraint ~ (!NEWLINE ~ WHITESPACE)* ~ constraints? }

assignment_statement = !{ pattern ~ ":" ~ expression }

expression_statement = !{ expression }

// Expressions

expression = _{
    function_expression
  | tuple_expression
  | collection_expression
  | is_expression
  | as_expression
  | annotate_expression
  | binary_expression
  | expression_element
}

expression_element = _{
    formatted_text_expression
  | call_expression
  | do_expression
  | when_expression
  | intrinsic_expression
  | subexpression
}

subexpression = _{
    placeholder_expression
  | variable_expression
  | trait_expression
  | number_expression
  | text_expression
  | structure_expression
  | block_expression
  | unit_expression
  | parenthesized_expression
}

parenthesized_expression = !{ "(" ~ expression ~ ")" }

placeholder_expression = { "_" }

variable_expression = { variable_name }

trait_expression = { type_name }

number_expression = { number }

text_expression = { text }

structure_expression = !{ "{" ~ structure_expression_fields ~ "}" }

structure_expression_fields = ${ structure_expression_field ~ ((!NEWLINE ~ WHITESPACE)* ~ NEWLINE ~ WHITESPACE* ~ structure_expression_field)* }
structure_expression_field  = !{ variable_name ~ ":" ~ expression }

block_expression = !{ "{" ~ statements? ~ "}" }

unit_expression = !{ "(" ~ ")" }

formatted_text_expression = { text ~ subexpression+ }

call_expression = ${ subexpression ~ ((!NEWLINE ~ WHITESPACE)* ~ subexpression)+ }

do_expression = !{ "do" ~ subexpression }

when_expression = !{ "when" ~ subexpression ~ "{" ~ arms? ~ "}" }

arms = ${ arm ~ ((!NEWLINE ~ WHITESPACE)* ~ NEWLINE ~ WHITESPACE* ~ arm)* }

arm = ${ subpattern ~ (!NEWLINE ~ WHITESPACE)* ~ "->" ~ WHITESPACE* ~ subexpression }

intrinsic_expression = !{ "intrinsic" ~ text ~ subexpression* }

function_expression        = !{ function_expression_inputs ~ expression_element }
function_expression_inputs = ${ subpattern ~ ((!NEWLINE ~ WHITESPACE)* ~ subpattern)* ~ (!NEWLINE ~ WHITESPACE)* ~ "->" }

tuple_expression = !{
    ("(" ~ ";" ~ ")")
  | (expression_element ~ (";" ~ expression_element)+ ~ ";"?)
}

collection_expression = !{
    ("(" ~ "," ~ ")")
  | (expression_element ~ ("," ~ expression_element)+ ~ ","?)
}

is_expression = !{ expression_element ~ "is" ~ pattern_element }

as_expression = !{ expression_element ~ "as" ~ type_element }

annotate_expression = !{ expression_element ~ "::" ~ type_element }

binary_expression = !{
    apply_expression
  | or_expression
  | and_expression
  | equal_expression
  | compare_expression
  | add_expression
  | multiply_expression
  | power_expression
  | by_expression
  | to_expression
}

apply_operator   =  { "." }
apply_expression = _{ expression_element ~ apply_operator ~ expression_element }

or_operator   =  { "or" }
or_expression = _{ expression_element ~ or_operator ~ expression_element }

and_operator   =  { "and" }
and_expression = _{ expression_element ~ and_operator ~ expression_element }

equal_operator   =  { "=" | "/=" }
equal_expression = _{ expression_element ~ equal_operator ~ expression_element }

compare_operator   =  { "<" | "<=" | ">" | ">=" }
compare_expression = _{ expression_element ~ compare_operator ~ expression_element }

add_operator   =  { "+" | "-" }
add_expression = _{ expression_element ~ add_operator ~ expression_element }

multiply_operator   =  { "*" | "/" | "%" }
multiply_expression = _{ expression_element ~ multiply_operator ~ expression_element }

power_operator   =  { "^" }
power_expression = _{ expression_element ~ power_operator ~ expression_element }

by_operator   =  { "by" }
by_expression = _{ expression_element ~ by_operator ~ expression_element }

to_operator   =  { "to" }
to_expression = _{ expression_element ~ (to_operator ~ expression_element)+ }

// Patterns

pattern = _{
    tuple_pattern
  | or_pattern
  | annotate_pattern
  | pattern_element
}

pattern_element = _{
    set_pattern
  | variant_pattern
  | subpattern
}

subpattern = _{
    wildcard_pattern
  | variable_pattern
  | number_pattern
  | text_pattern
  | destructure_pattern
  | unit_pattern
  | parenthesized_pattern
}

parenthesized_pattern = !{ "(" ~ pattern ~ ")" }

wildcard_pattern = { "_" }

variable_pattern = { variable_name }

number_pattern = { number }

text_pattern = { text }

destructure_pattern = !{ "{" ~ destructure_pattern_field* ~ "}" }

destructure_pattern_field = !{ variable_name ~ ":" ~ pattern }

unit_pattern = !{ "(" ~ ")" }

tuple_pattern = !{
    ("(" ~ ";" ~ ")")
  | (pattern_element ~ (";" ~ pattern_element)+ ~ ";"?)
}

or_pattern = !{ pattern_element ~ ("or" ~ pattern_element)+ }

annotate_pattern = !{ "(" ~ pattern_element ~ "::" ~ type_element ~ ")" }

set_pattern = !{ "set" ~ variable_name }

variant_pattern         = ${ variant_name ~ ((!NEWLINE ~ WHITESPACE)* ~ variant_pattern_element)* }
variant_pattern_element = !{ subpattern }

// Types

type = _{
    tuple_type
  | function_type
  | type_element
}

type_element = _{
    parameterized_type
  | subtype
}

subtype = _{
    placeholder_type
  | parameter_type
  | named_type
  | block_type
  | unit_type
  | parenthesized_type
}

parenthesized_type = !{ "(" ~ type ~ ")" }

placeholder_type = { "_" }

parameter_type = { type_parameter_name }

named_type = { type_name }

function_type        = !{ function_type_inputs ~ type_element }
function_type_inputs = ${ subtype ~ ((!NEWLINE ~ WHITESPACE)* ~ subtype)* ~ (!NEWLINE ~ WHITESPACE)* ~ "->" }

block_type = !{ "{" ~ type_element ~ "}" }

unit_type = !{ "(" ~ ")" }

tuple_type = !{
    ("(" ~ ";" ~ ")")
  | (type_element ~ (";" ~ type_element)+ ~ ";"?)
}

parameterized_type         = ${ type_name ~ ((!NEWLINE ~ WHITESPACE)* ~ parameterized_type_element)+ }
parameterized_type_element = !{ subtype }

// Type annotations and constraints

type_parameters = ${ type_parameter_name ~ ((!NEWLINE ~ WHITESPACE)* ~ type_parameter_name)* ~ (!NEWLINE ~ WHITESPACE)* ~ "=>" }

constraints = ${ "where" ~ ((!NEWLINE ~ WHITESPACE)* ~ constraint)+ }

constraint = _{
    bound_constraint
  | infer_constraint
  | default_constraint
}

bound_constraint = !{ "(" ~ type_name ~ subtype* ~ ")" }

infer_constraint = !{ "(" ~ "infer" ~ type_parameter_name ~ ")" }

default_constraint = !{ "(" ~ type_parameter_name ~ ":" ~ type_element ~ ")" }

// Attributes

attribute = { "[" ~ attribute_name ~ (":" ~ attribute_value)? ~ "]" }

attribute_value = _{ text_attribute_value }

text_attribute_value = { text }

// Tokens

comment = @{ "--" ~ (!NEWLINE ~ ANY)* }

text = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

number = @{ ("+" | "-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

capital_name = { !(number | keyword) ~ (ASCII_DIGIT ~ "-")* ~ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* ~ ("-" ~ (ASCII_ALPHANUMERIC | "_")+)* ~ ("!" | "?")? }

lowercase_name = { !(number | keyword | capital_name) ~ (ASCII_ALPHANUMERIC | "_")+ ~ ("-" ~ (ASCII_ALPHANUMERIC | "_")+)* ~ ("!" | "?")? }

type_name = @{ capital_name }

variant_name = @{ capital_name }

variable_name = @{ lowercase_name }

type_parameter_name = @{ lowercase_name }

attribute_name = @{ lowercase_name }

keyword = @{
    "do"
  | "infer"
  | "instance"
  | "intrinsic"
  | "set"
  | "trait"
  | "type"
  | "when"
  | "where"
  | "or"
  | "and"
  | "by"
  | "to"
  | "is"
  | "as"
}

WHITESPACE = _{
    " "
  | "\t"
  | NEWLINE
}

COMMENT = { comment }
